basePath: /
definitions:
  types.AuthResponse:
    properties:
      token:
        type: string
    type: object
  types.LoginPayload:
    properties:
      email:
        type: string
      password:
        maxLength: 30
        minLength: 8
        type: string
    required:
    - email
    - password
    type: object
  types.RegisterPayload:
    properties:
      email:
        type: string
      name:
        type: string
      password:
        maxLength: 30
        minLength: 8
        type: string
    required:
    - email
    - name
    - password
    type: object
  types.SocialLoginPayload:
    properties:
      provider:
        type: string
      token:
        type: string
    required:
    - provider
    - token
    type: object
  types.UserResponse:
    properties:
      avatar:
        type: string
      created_at:
        type: string
      email:
        type: string
      id:
        type: integer
      name:
        type: string
      updated_at:
        type: string
    type: object
host: localhost:9000
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: This is a sample server.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Gin Postgres Swagger Example API
  version: "1.0"
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: User login
      operationId: login
      parameters:
      - description: User credentials
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/types.LoginPayload'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.AuthResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Login
  /auth/register:
    post:
      consumes:
      - application/json
      description: User registration
      operationId: register
      parameters:
      - description: User info
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/types.RegisterPayload'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.AuthResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Register
  /auth/sociallogin:
    post:
      consumes:
      - application/json
      description: User registration/login with Social providers
      operationId: sociallogin
      parameters:
      - description: User info
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/types.SocialLoginPayload'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.AuthResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Social Login
  /user:
    get:
      consumes:
      - application/json
      description: Get user by ID
      operationId: get-user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.UserResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get user
schemes:
- http
securityDefinitions:
  BearerAuth:
    description: '"Type ''Bearer'' followed by a space and your JWT token."'
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
